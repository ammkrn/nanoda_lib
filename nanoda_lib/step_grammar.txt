MemBaseFf ::= nat '.' LM '.' F '.' { 3 * child }
MemBaseTt ::= nat '.' LM '.' T '.' { 4 * child }
MemStep ::= nat '.' LM '.' S '.' { 7 * child }
TrySuccBaseNone ::= nat '.' TS '.' N '.' { 2 * child }
TrySuccBaseSome ::= nat '.' TS '.' S '.' { 3 * child }
PosBaseNone ::= nat '.' LP '.' N '.' { 3 * child }
PosBaseSome ::= nat '.' LP '.' O '.' { 4 * child }
PosStep ::= nat '.' LP '.' S '.' { 8 * child }
IsSubsetBaseNil ::= nat '.' SS '.' N '.' { 3 * child }
IsSubsetStep ::= nat '.' SS '.' S '.' { 9 * child }
SkipBaseNil ::= nat '.' SK '.' N '.' { 2 * child }
SkipBaseZero ::= nat '.' SK '.' Z '.' { 2 * child }
SkipStep ::= nat '.' SK '.' S '.' { 7 * child }
TakeBaseNil ::= nat '.' TK '.' N '.' { 2 * child }
TakeBaseZero ::= nat '.' TK '.' Z '.' { 3 * child }
TakeStep ::= nat '.' TK '.' S '.' { 8 * child }
NoDupesBaseNil ::= nat '.' ND '.' N '.' { 2 * child }
NoDupesStepTt ::= nat '.' ND '.' S '.' { 8 * child }
GetBaseNil ::= nat '.' GT '.' N '.' { 3 * child }
GetBaseZero ::= nat '.' GT '.' Z '.' { 5 * child }
GetStep ::= nat '.' GT '.' S '.' { 7 * child }
LenBaseNil ::= nat '.' LN '.' N '.' { 2 * child }
LenStep ::= nat '.' LN '.' S '.' { 6 * child }
ConcatBaseNil ::= nat '.' CN '.' N '.' { 2 * child }
ConcatStep ::= nat '.' CN '.' S '.' { 7 * child }
GetPrefixBaseAnon ::= nat '.' GP '.' A '.' { 1 * child }
GetPrefixStepStr ::= nat '.' GP '.' S '.' { 3 * child }
GetPrefixStepNum ::= nat '.' GP '.' N '.' { 3 * child }
IsParamZero ::= nat '.' IP '.' Z '.' { 2 * child }
IsParamSucc ::= nat '.' IP '.' S '.' { 3 * child }
IsParamMax ::= nat '.' IP '.' M '.' { 4 * child }
IsParamImax ::= nat '.' IP '.' I '.' { 4 * child }
IsParamParam ::= nat '.' IP '.' P '.' { 3 * child }
IsZeroLitZero ::= nat '.' ZL '.' Z '.' { 2 * child }
IsZeroLitSucc ::= nat '.' ZL '.' S '.' { 3 * child }
IsZeroLitMax ::= nat '.' ZL '.' M '.' { 4 * child }
IsZeroLitImax ::= nat '.' ZL '.' I '.' { 4 * child }
IsZeroLitParam ::= nat '.' ZL '.' P '.' { 3 * child }
IsSuccZero ::= nat '.' NS '.' Z '.' { 2 * child }
IsSuccSucc ::= nat '.' NS '.' S '.' { 3 * child }
IsSuccMax ::= nat '.' NS '.' M '.' { 4 * child }
IsSuccImax ::= nat '.' NS '.' I '.' { 4 * child }
IsSuccParam ::= nat '.' NS '.' P '.' { 3 * child }
IsAnyMaxZero ::= nat '.' AM '.' Z '.' { 2 * child }
IsAnyMaxSucc ::= nat '.' AM '.' S '.' { 3 * child }
IsAnyMaxMax ::= nat '.' AM '.' M '.' { 4 * child }
IsAnyMaxImax ::= nat '.' AM '.' I '.' { 4 * child }
IsAnyMaxParam ::= nat '.' AM '.' P '.' { 3 * child }
CombiningLzero ::= nat '.' CO '.' L '.' { 2 * child }
CombiningRzero ::= nat '.' CO '.' R '.' { 2 * child }
CombiningSucc ::= nat '.' CO '.' S '.' { 7 * child }
CombiningOwise ::= nat '.' CO '.' O '.' { 7 * child }
SimplifyZero ::= nat '.' SI '.' Z '.' { 1 * child }
SimplifyParam ::= nat '.' SI '.' P '.' { 2 * child }
SimplifySucc ::= nat '.' SI '.' S '.' { 5 * child }
SimplifyMax ::= nat '.' SI '.' M '.' { 9 * child }
SimplifyImaxZero ::= nat '.' SI '.' IZ '.' { 5 * child }
SimplifyImaxSucc ::= nat '.' SI '.' IS '.' { 9 * child }
SimplifyImaxOwise ::= nat '.' SI '.' IO '.' { 10 * child }
ParamsDefinedZero ::= nat '.' PD '.' Z '.' { 3 * child }
ParamsDefinedSucc ::= nat '.' PD '.' S '.' { 5 * child }
ParamsDefinedMax ::= nat '.' PD '.' M '.' { 7 * child }
ParamsDefinedImax ::= nat '.' PD '.' I '.' { 7 * child }
ParamsDefinedBaseParam ::= nat '.' PD '.' Q '.' { 6 * child }
ParamsDefinedStepParam ::= nat '.' PD '.' R '.' { 7 * child }
SubstLZero ::= nat '.' SL '.' Z '.' { 3 * child }
SubstLSucc ::= nat '.' SL '.' S '.' { 7 * child }
SubstLMax ::= nat '.' SL '.' M '.' { 10 * child }
SubstLImax ::= nat '.' SL '.' I '.' { 10 * child }
SubstLParamNil ::= nat '.' SL '.' N '.' { 4 * child }
SubstLParamHit ::= nat '.' SL '.' H '.' { 7 * child }
SubstLParamMiss ::= nat '.' SL '.' M '.' { 11 * child }
ParamsDefinedManyBase ::= nat '.' PS '.' B '.' { 3 * child }
ParamsDefinedManyStep ::= nat '.' PS '.' S '.' { 7 * child }
SubstLManyBase ::= nat '.' SM '.' B '.' { 3 * child }
SubstLManyStep ::= nat '.' SM '.' S '.' { 10 * child }
FoldImaxsBase ::= nat '.' FI '.' B '.' { 2 * child }
FoldImaxsStep ::= nat '.' FI '.' S '.' { 6 * child }
LeqCoreZAny ::= nat '.' QC '.' ZA '.' { 6 * child }
LeqCoreAnyZ ::= nat '.' QC '.' AZ '.' { 6 * child }
LeqCoreParamParam ::= nat '.' QC '.' PP '.' { 7 * child }
LeqCoreParamZero ::= nat '.' QC '.' PZ '.' { 6 * child }
LeqCoreZeroParam ::= nat '.' QC '.' ZP '.' { 6 * child }
LeqCoreSuccAny ::= nat '.' QC '.' SA '.' { 7 * child }
LeqCoreAnySucc ::= nat '.' QC '.' AS '.' { 7 * child }
LeqCoreMaxAny ::= nat '.' QC '.' MA '.' { 11 * child }
LeqCoreParamMax ::= nat '.' QC '.' PM '.' { 12 * child }
LeqCoreZeroMax ::= nat '.' QC '.' ZM '.' { 11 * child }
LeqCoreImaxCongr ::= nat '.' QC '.' IC '.' { 7 * child }
LeqCoreImaxParamL ::= nat '.' QC '.' IL '.' { 27 * child }
LeqCoreImaxParamR ::= nat '.' QC '.' IR '.' { 27 * child }
LeqCoreImaxImaxAny ::= nat '.' QC '.' LI '.' { 9 * child }
LeqCoreImaxMaxAny ::= nat '.' QC '.' LM '.' { 11 * child }
LeqCoreAnyImaxImax ::= nat '.' QC '.' RI '.' { 9 * child }
LeqCoreAnyImaxMax ::= nat '.' QC '.' RM '.' { 11 * child }
LeqBase ::= nat '.' LE '.' B '.' { 8 * child }
EqAntisymmBase ::= nat '.' LQ '.' B '.' { 7 * child }
IsZeroBase ::= nat '.' IZ '.' B '.' { 3 * child }
IsNonzeroBase ::= nat '.' NZ '.' B '.' { 3 * child }
MaybeZeroBase ::= nat '.' MZ '.' B '.' { 3 * child }
MaybeNonzeroBase ::= nat '.' MN '.' B '.' { 3 * child }
EqAntisymmManyBase ::= nat '.' EM '.' T '.' { 2 * child }
EqAntisymmManyBaseFL ::= nat '.' EM '.' L '.' { 4 * child }
EqAntisymmManyBaseFR ::= nat '.' EM '.' R '.' { 4 * child }
EqAntisymmManyStep ::= nat '.' EM '.' S '.' { 11 * child }
InstNoBound ::= nat '.' I '.' N '.' { 3 * child }
InstByAux ::= nat '.' I '.' A '.' { 4 * child }
InstAuxNoBound ::= nat '.' IA '.' N '.' { 4 * child }
InstAuxVarHit ::= nat '.' IA '.' V '.' { 6 * child }
InstAuxVarMiss ::= nat '.' IA '.' M '.' { 5 * child }
InstAuxApp ::= nat '.' IA '.' A '.' { 10 * child }
InstAuxPi ::= nat '.' IA '.' P '.' { 12 * child }
InstAuxLambda ::= nat '.' IA '.' L '.' { 12 * child }
InstAuxLet ::= nat '.' IA '.' Z '.' { 15 * child }
AbstrNoLocals ::= nat '.' AB '.' N '.' { 2 * child }
AbstrByAux ::= nat '.' AB '.' A '.' { 4 * child }
AbstrAuxNoLocals ::= nat '.' AA '.' N '.' { 4 * child }
AbstrAuxLocalHit ::= nat '.' AA '.' X '.' { 10 * child }
AbstrAuxLocalMiss ::= nat '.' AA '.' M '.' { 8 * child }
AbstrAuxApp ::= nat '.' AA '.' A '.' { 10 * child }
AbstrAuxPi ::= nat '.' AA '.' P '.' { 10 * child }
AbstrAuxLambda ::= nat '.' AA '.' L '.' { 10 * child }
AbstrAuxLet ::= nat '.' AA '.' Z '.' { 13 * child }
SubstEVar ::= nat '.' SE '.' V '.' { 4 * child }
SubstESort ::= nat '.' SE '.' S '.' { 7 * child }
SubstEConst ::= nat '.' SE '.' C '.' { 8 * child }
SubstEApp ::= nat '.' SE '.' A '.' { 10 * child }
SubstEPi ::= nat '.' SE '.' P '.' { 12 * child }
SubstELambda ::= nat '.' SE '.' L '.' { 12 * child }
SubstELet ::= nat '.' SE '.' Z '.' { 15 * child }
SubstELocal ::= nat '.' SE '.' X '.' { 10 * child }
CalcHeightAuxVar ::= nat '.' CH '.' V '.' { 3 * child }
CalcHeightAuxSort ::= nat '.' CH '.' S '.' { 3 * child }
CalcHeightAuxConstHit ::= nat '.' CH '.' H '.' { 10 * child }
CalcHeightAuxConstMiss ::= nat '.' CH '.' M '.' { 4 * child }
CalcHeightAuxApp ::= nat '.' CH '.' A '.' { 8 * child }
CalcHeightAuxPi ::= nat '.' CH '.' P '.' { 10 * child }
CalcHeightAuxLambda ::= nat '.' CH '.' L '.' { 10 * child }
CalcHeightAuxLet ::= nat '.' CH '.' Z '.' { 13 * child }
HasIndOccVar ::= nat '.' IO '.' V '.' { 4 * child }
HasIndOccSort ::= nat '.' IO '.' S '.' { 4 * child }
HasIndOccConst ::= nat '.' IO '.' C '.' { 6 * child }
HasIndOccApp ::= nat '.' IO '.' A '.' { 9 * child }
HasIndOccPi ::= nat '.' IO '.' P '.' { 10 * child }
HasIndOccLambda ::= nat '.' IO '.' L '.' { 10 * child }
HasIndOccLet ::= nat '.' IO '.' Z '.' { 13 * child }
HasIndOccLocal ::= nat '.' IO '.' X '.' { 7 * child }
ApplyPiBase ::= nat '.' AP '.' B '.' { 9 * child }
ApplyLambdaBase ::= nat '.' AL '.' B '.' { 9 * child }
FoldPisNil ::= nat '.' FP '.' N '.' { 2 * child }
FoldPisCons ::= nat '.' FP '.' C '.' { 8 * child }
FoldLambdasNil ::= nat '.' FL '.' N '.' { 2 * child }
FoldLambdasCons ::= nat '.' FL '.' C '.' { 8 * child }
